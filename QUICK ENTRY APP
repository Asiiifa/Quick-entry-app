import tkinter as tk
from tkinter import messagebox, simpledialog
from tkcalendar import DateEntry
from PIL import Image, ImageTk
import csv
import datetime
import os
import sys

def resource_path(relative_path):
    try:
        base_path = sys._MEIPASS
    except Exception:
        base_path = os.path.abspath(".")
    return os.path.join(base_path, relative_path)

class QuickEntryApp:
    def __init__(self, root):
        self.root = root
        self.root.title("QuickEntry App")
        self.root.geometry("800x600")
        self.root.configure(bg="#f0f4ff")
        self.admin_password = "admin123"
        self.frames = {}

        self.init_welcome_screen()
        self.init_main_screen()
        self.init_search_screen()
        self.init_result_screen()
        self.init_confirmation_screen()
        self.init_clock()

        self.show_frame("Welcome")

    def init_welcome_screen(self):
        frame = tk.Frame(self.root, bg="#f0f4ff")
        self.frames["Welcome"] = frame

        try:
            logo_image = Image.open(resource_path("quickentry_logo.png"))
            logo_image = logo_image.resize((150, 150))
            logo_photo = ImageTk.PhotoImage(logo_image)
            logo_label = tk.Label(frame, image=logo_photo, bg="#f0f4ff")
            logo_label.image = logo_photo
            logo_label.pack(pady=30)
        except:
            pass

        tk.Label(frame, text="Welcome to QuickEntry", font=("Segoe UI", 18, "bold"), bg="#f0f4ff").pack(pady=10)
        tk.Button(frame, text="Enter Visitor Log", command=lambda: self.show_frame("Main"), width=20, bg="#6fa8dc", font=("Segoe UI", 12)).pack(pady=10)

    def init_main_screen(self):
        frame = tk.Frame(self.root, bg="#f0f4ff")
        self.frames["Main"] = frame

        # Top logo (left)
        try:
            logo_img = Image.open(resource_path("quickentry_logo.png")).resize((40, 40))
            self.logo_photo = ImageTk.PhotoImage(logo_img)
            logo_label = tk.Label(frame, image=self.logo_photo, bg="#f0f4ff")
            logo_label.place(x=10, y=10)
        except:
            pass

        # Search Icon (right)
        try:
            search_img = Image.open(resource_path("search-engine-marketing-icon.png")).resize((30, 30))
            self.search_icon = ImageTk.PhotoImage(search_img)
            search_button = tk.Button(frame, image=self.search_icon, bg="#f0f4ff", bd=0, command=lambda: self.show_frame("Search"))
            search_button.place(x=750, y=15)
        except:
            pass

        # Centered Heading
        tk.Label(frame, text="Visitor Log Register", font=("Segoe UI", 18, "bold"), bg="#f0f4ff").place(relx=0.5, y=20, anchor="n")

        # Clock
        self.clock_label = tk.Label(frame, text="", font=("Segoe UI", 10), bg="#f0f4ff", fg="gray")
        self.clock_label.pack(pady=(60, 5))

        # Entry Form
        entry_frame = tk.Frame(frame, bg="#f0f4ff")
        entry_frame.pack()

        tk.Label(entry_frame, text="Name", bg="#f0f4ff", font=("Segoe UI", 11)).grid(row=0, column=0, padx=10, pady=5, sticky="e")
        self.name_entry = tk.Entry(entry_frame, font=("Segoe UI", 11))
        self.name_entry.grid(row=0, column=1, padx=10, pady=5)

        tk.Label(entry_frame, text="Date", bg="#f0f4ff", font=("Segoe UI", 11)).grid(row=1, column=0, padx=10, pady=5, sticky="e")
        self.date_entry = DateEntry(entry_frame, width=18, background='darkblue', foreground='white', date_pattern='yyyy-mm-dd', font=("Segoe UI", 11))
        self.date_entry.grid(row=1, column=1, padx=10, pady=5)

        tk.Label(entry_frame, text="Time In", bg="#f0f4ff", font=("Segoe UI", 11)).grid(row=2, column=0, padx=10, pady=5, sticky="e")
        self.timein_entry = tk.Entry(entry_frame, font=("Segoe UI", 11))
        self.timein_entry.grid(row=2, column=1, padx=10, pady=5)

        tk.Label(entry_frame, text="Time Out", bg="#f0f4ff", font=("Segoe UI", 11)).grid(row=3, column=0, padx=10, pady=5, sticky="e")
        self.timeout_entry = tk.Entry(entry_frame, state="readonly", font=("Segoe UI", 11))
        self.timeout_entry.grid(row=3, column=1, padx=10, pady=5)

        tk.Label(entry_frame, text="Reason", bg="#f0f4ff", font=("Segoe UI", 11)).grid(row=4, column=0, padx=10, pady=5, sticky="e")
        self.reason_entry = tk.Entry(entry_frame, font=("Segoe UI", 11))
        self.reason_entry.grid(row=4, column=1, padx=10, pady=5)

        # Buttons
        button_frame = tk.Frame(frame, bg="#f0f4ff")
        button_frame.pack(pady=10)

        tk.Button(button_frame, text="Submit", command=self.submit_entry, bg="#b6d7a8", width=12, font=("Segoe UI", 11)).grid(row=0, column=0, padx=5)
        tk.Button(button_frame, text="Export to Excel", command=self.export_to_csv, bg="#cfe2f3", width=15, font=("Segoe UI", 11)).grid(row=0, column=1, padx=5)

        # Autofill
        now = datetime.datetime.now()
        self.date_entry.set_date(now.date())
        self.timein_entry.insert(0, now.strftime("%H:%M:%S"))

    def init_search_screen(self):
        frame = tk.Frame(self.root, bg="#f0f4ff")
        self.frames["Search"] = frame

        tk.Label(frame, text="Search Visitor Logs", font=("Segoe UI", 14, "bold"), bg="#f0f4ff").pack(pady=10)

        search_frame = tk.Frame(frame, bg="#f0f4ff")
        search_frame.pack(pady=10)

        self.search_var = tk.StringVar()
        tk.Entry(search_frame, textvariable=self.search_var, width=40, font=("Segoe UI", 11)).grid(row=0, column=0, padx=5)
        tk.Button(search_frame, text="Search", command=self.perform_search, bg="#6fa8dc", font=("Segoe UI", 11)).grid(row=0, column=1, padx=5)
        tk.Button(search_frame, text="Back", command=lambda: self.show_frame("Main"), bg="#f4cccc", font=("Segoe UI", 11)).grid(row=0, column=2, padx=5)

        self.search_results = tk.Text(frame, height=15, width=90, font=("Segoe UI", 10))
        self.search_results.pack(pady=10)

    def init_result_screen(self):
        frame = tk.Frame(self.root, bg="#f0f4ff")
        self.frames["Result"] = frame

        tk.Label(frame, text="Entry Submitted Successfully", font=("Segoe UI", 14, "bold"), bg="#f0f4ff", fg="green").pack(pady=10)
        self.result_text = tk.Text(frame, height=10, width=80, font=("Segoe UI", 10))
        self.result_text.pack(pady=10)
        tk.Button(frame, text="Back to Entry", command=lambda: self.show_frame("Main"), bg="#cfe2f3", font=("Segoe UI", 11)).pack(pady=10)

    def init_confirmation_screen(self):
        frame = tk.Frame(self.root, bg="#f0f4ff")
        self.frames["Confirm"] = frame

        self.confirm_label = tk.Label(frame, text="", font=("Segoe UI", 14), bg="#f0f4ff", fg="green")
        self.confirm_label.pack(pady=30)
        tk.Button(frame, text="View Result", command=lambda: self.show_frame("Result"), bg="#cfe2f3", font=("Segoe UI", 11)).pack()

    def init_clock(self):
        def update_clock():
            now = datetime.datetime.now()
            current_time = now.strftime("%Y-%m-%d %H:%M:%S")
            if hasattr(self, 'clock_label'):
                self.clock_label.config(text=current_time)
            self.root.after(1000, update_clock)
        update_clock()

    def show_frame(self, name):
        for f in self.frames.values():
            f.pack_forget()
        self.frames[name].pack(fill="both", expand=True)

    def submit_entry(self):
        name = self.name_entry.get().strip()
        date = self.date_entry.get_date().strftime("%Y-%m-%d")
        time_in = self.timein_entry.get().strip()
        reason = self.reason_entry.get().strip()
        now = datetime.datetime.now()
        time_out = now.strftime("%H:%M:%S")

        self.timeout_entry.config(state="normal")
        self.timeout_entry.delete(0, tk.END)
        self.timeout_entry.insert(0, time_out)
        self.timeout_entry.config(state="readonly")

        if not all([name, date, time_in, time_out, reason]):
            messagebox.showerror("Error", "Please fill all required fields.")
            return

        try:
            with open("visitor_log.csv", "a", newline="") as file:
                csv.writer(file).writerow([name, date, time_in, time_out, reason])

            self.name_entry.delete(0, tk.END)
            self.timein_entry.delete(0, tk.END)
            self.reason_entry.delete(0, tk.END)
            self.timeout_entry.config(state="normal")
            self.timeout_entry.delete(0, tk.END)
            self.timeout_entry.config(state="readonly")

            self.date_entry.set_date(datetime.date.today())
            self.timein_entry.insert(0, now.strftime("%H:%M:%S"))

            self.result_text.delete(1.0, tk.END)
            self.result_text.insert(tk.END, f"Name: {name}\nDate: {date}\nTime In: {time_in}\nTime Out: {time_out}\nReason: {reason}")
            self.confirm_label.config(text=f"âœ… Entry recorded at {time_out}!")
            self.show_frame("Confirm")
        except Exception as e:
            messagebox.showerror("Error", str(e))

    def perform_search(self):
        keyword = self.search_var.get().lower()
        self.search_results.delete(1.0, tk.END)

        if not os.path.exists("visitor_log.csv"):
            self.search_results.insert(tk.END, "No records found.")
            return

        with open("visitor_log.csv", "r") as file:
            reader = csv.reader(file)
            for row in reader:
                if any(keyword in col.lower() for col in row):
                    self.search_results.insert(tk.END, f"{' | '.join(row)}\n")

    def export_to_csv(self):
        if not os.path.exists("visitor_log.csv"):
            messagebox.showwarning("No Data", "No data to export.")
            return
        today = datetime.date.today().strftime("%Y%m%d")
        export_name = f"visitor_log_{today}.csv"
        os.replace("visitor_log.csv", export_name)
        messagebox.showinfo("Exported", f"Data exported to {export_name}")

# Run App
if __name__ == "__main__":
    root = tk.Tk()
    app = QuickEntryApp(root)
    root.mainloop()
